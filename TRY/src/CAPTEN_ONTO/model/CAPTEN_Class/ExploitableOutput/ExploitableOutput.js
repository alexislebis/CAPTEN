/**
 * An exploitable output is the identificaation of a subpart of a RGTE which will represents the sought
 * Knowledge, or reusable output.
 */

function ExploitableOutput(cptClass){
  CAPTENClass.call(this);

  if(!cptClass instanceof CAPTENClass)
    return;

    //REBUILD from the CAPTENClass
   this.uri = cptClass.uri;
   this.properties = cptClass.properties;

   this.isBlank = cptClass.isBlank;

   //Dynamic inheritance system. CF Property for more details
   this.iName = "ExploitableOutput";
   this.label = cptClass.label;
   this.inheritanceArray = cptClass.inheritanceArray;
   this.subClasses = cptClass.subClasses; //Here are the classes which inherit this
   this.subClassOf = cptClass.subClassOf; //Here, the classes inherited from this

   // Keep a link with the instance of the same class which was used to produce this
   // copy function MUST DEFINE this.derivedFrom attribute.
     this.derivedFrom = cptClass;


   //Private
    //this.exploitableOutput = null; //FIXME A sub RTE representing smthg can have subpart representing smth else, in a more atomic PoV
    //TODO REDO
    this.annotation = null;

    this.exploitableOutputSummary = null;
    this.exploitableOutputTerminology = null;
    this.exploitationType = null;

    this.contextValidity = null;

    this.scientificStatement = null;//REVIEW little change applyed to the CAPTEN-ONTO ExplOut has directly scStamtents []
    this.IAP = null;
    }

    ExploitableOutput.prototype = new CAPTENClass();
    ExploitableOutput.prototype.constructor = ExploitableOutput;
